// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(cuid())
  name     String
  lastname String
  email    String   @unique
  password String
  type     UserType @default(THERAPIST)
  phone    String?

  techniques             UserTechniqueStatus[]
  services               Service[]
  patients               Patient[]
  userTechniqueUsageLogs UserTechniqueUsageLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id             String  @id @default(cuid())
  name           String
  secondname     String?
  lastname       String
  secondlastname String?
  email          String?
  phone          String?
  address        String?
  notes          String?

  userId                 String?
  user                   User?                   @relation(fields: [userId], references: [id])
  sales                  Sale[]
  appointments           Appointment[]
  patientServiceBalances PatientServiceBalance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Technique {
  id          String @id @default(cuid())
  name        String
  description String

  users                  UserTechniqueStatus[]
  services               Service[]
  userTechniqueUsageLogs UserTechniqueUsageLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int // Duration in minutes
  status      ServiceStatus @default(ACTIVE)

  user                   User?                   @relation(fields: [userId], references: [id])
  userId                 String?
  techniques             Technique[]
  sales                  Sale[]
  appointments           Appointment[]
  package                Package?                @relation(fields: [packageId], references: [id])
  packageId              String?
  patientServiceBalances PatientServiceBalance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Package {
  id          String @id @default(cuid())
  name        String
  description String
  price       Float

  services     Service[]
  appointments Appointment[]
  sales        Sale[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id     String   @id @default(cuid())
  amount Float
  date   DateTime @default(now())

  serviceId              String?
  service                Service?                @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  packageId              String?
  package                Package?                @relation(fields: [packageId], references: [id], onDelete: Restrict)
  patientId              String
  patient                Patient                 @relation(fields: [patientId], references: [id], onDelete: Restrict)
  patientServiceBalances PatientServiceBalance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id          String            @id @default(cuid())
  date        DateTime
  concurrency Concurrency
  status      AppointmentStatus @default(PROGRAMMED)
  description String?

  patients               Patient[]
  serviceId              String?
  service                Service?                @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  packageId              String?
  package                Package?                @relation(fields: [packageId], references: [id], onDelete: Restrict)
  patientServiceUsages   PatientServiceUsage[]
  userTechniqueUsageLogs UserTechniqueUsageLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PatientServiceBalance {
  id    String @id @default(cuid())
  total Int // Total servicios comprados
  used  Int @default(0) // Servicios ya utilizados

  patient              Patient               @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId            String
  service              Service               @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId            String
  sale                 Sale                  @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId               String
  patientServiceUsages PatientServiceUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([patientId, serviceId, saleId])
}

model PatientServiceUsage {
  id       String @id @default(cuid())
  quantity Int    @default(1) // por si usas más de una sesión

  appointment           Appointment           @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId         String
  patientServiceBalance PatientServiceBalance @relation(fields: [balanceId], references: [id], onDelete: Cascade)
  balanceId             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([appointmentId, balanceId])
}

model UserTechniqueUsageLog {
  id       String @id @default(cuid())
  quantity Int    @default(1)

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  technique     Technique   @relation(fields: [techniqueId], references: [id], onDelete: Cascade)
  techniqueId   String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, techniqueId, appointmentId])
}

model UserTechniqueStatus {
  id     String          @id @default(cuid())
  status TechniqueStatus @default(PRACTITIONER)

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  technique   Technique @relation(fields: [techniqueId], references: [id], onDelete: Cascade)
  techniqueId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, techniqueId])
}

enum ServiceStatus {
  ACTIVE
  INACTIVE
}

enum Concurrency {
  SINGLE
  MULTIPLE
}

enum UserType {
  THERAPIST
  GUIDE
  ADMIN
}

enum TechniqueStatus {
  PRACTITIONER // habilitado para ejercer
  THERAPIST // habilitado para vender
}

enum AppointmentStatus {
  PROGRAMMED
  DONE
}
